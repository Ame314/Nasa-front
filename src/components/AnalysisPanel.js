import React from "react";
import MiniPlanet3D from "./MiniPlanet3D";

export default function AnalysisPanel({ inputs }) {
  // Funci√≥n para analizar los datos ingresados
  const analyzeInputs = () => {
    const analysis = {
      planetType: "",
      habitability: "",
      orbitType: "",
      stellarType: "",
      detectionQuality: "",
      insights: [],
      warnings: [],
      characteristics: []
    };

    // An√°lisis del Radio del Planeta (koi_prad)
    if (inputs.koi_prad) {
      if (inputs.koi_prad < 0.5) {
        analysis.planetType = "Sub-Tierra (Mercurio-like)";
        analysis.insights.push("ü™® Planeta peque√±o, probablemente rocoso con poca atm√≥sfera");
      } else if (inputs.koi_prad < 1.5) {
        analysis.planetType = "Tipo Tierra/Super-Tierra";
        analysis.characteristics.push({ label: "Tama√±o", value: "Similar a la Tierra", icon: "üåç" });
        analysis.insights.push("üåç Tama√±o comparable a la Tierra, posible planeta rocoso");
      } else if (inputs.koi_prad < 4) {
        analysis.planetType = "Mini-Neptuno";
        analysis.characteristics.push({ label: "Tama√±o", value: "Entre Tierra y Neptuno", icon: "üîµ" });
        analysis.insights.push("üí® Planeta de tama√±o medio, probablemente con atm√≥sfera densa");
      } else {
        analysis.planetType = "Gigante Gaseoso (J√∫piter-like)";
        analysis.characteristics.push({ label: "Tama√±o", value: "Gigante Gaseoso", icon: "ü™ê" });
        analysis.insights.push("ü™ê Planeta masivo, principalmente compuesto de gas");
      }
    }

    // An√°lisis de Temperatura (koi_teq)
    if (inputs.koi_teq) {
      const temp = inputs.koi_teq;
      if (temp > 1000) {
        analysis.habitability = "‚ùå Inhabitable - Extremadamente Caliente";
        analysis.characteristics.push({ label: "Temperatura", value: `${temp}K (Horno)`, icon: "üî•" });
        analysis.warnings.push("‚ö†Ô∏è Temperatura superior a 1000K - Superficie fundida probable");
      } else if (temp > 600) {
        analysis.habitability = "‚ùå Inhabitable - Muy Caliente";
        analysis.characteristics.push({ label: "Temperatura", value: `${temp}K (Venusiano)`, icon: "üå°Ô∏è" });
        analysis.warnings.push("‚ö†Ô∏è Similar a Venus - Efecto invernadero extremo");
      } else if (temp >= 273 && temp <= 373) {
        analysis.habitability = "‚úÖ Zona Habitable - Agua L√≠quida Posible";
        analysis.characteristics.push({ label: "Temperatura", value: `${temp}K (Templada)`, icon: "üíß" });
        analysis.insights.push("üéØ Temperatura perfecta para agua l√≠quida en superficie");
      } else if (temp < 200) {
        analysis.habitability = "‚ùå Inhabitable - Extremadamente Fr√≠o";
        analysis.characteristics.push({ label: "Temperatura", value: `${temp}K (Congelado)`, icon: "‚ùÑÔ∏è" });
        analysis.warnings.push("‚ö†Ô∏è Temperatura bajo punto de congelaci√≥n - Mundo helado");
      } else {
        analysis.habitability = "‚ö†Ô∏è Zona Marginal";
        analysis.characteristics.push({ label: "Temperatura", value: `${temp}K`, icon: "üå°Ô∏è" });
      }
    }

    // An√°lisis del Periodo Orbital (koi_period)
    if (inputs.koi_period) {
      const period = inputs.koi_period;
      if (period < 1) {
        analysis.orbitType = "√ìrbita Ultra-Corta (< 1 d√≠a)";
        analysis.characteristics.push({ label: "√ìrbita", value: `${period.toFixed(2)} d√≠as`, icon: "‚ö°" });
        analysis.insights.push("‚ö° √ìrbita extremadamente r√°pida - Muy cerca de su estrella");
      } else if (period < 10) {
        analysis.orbitType = "√ìrbita Cercana (1-10 d√≠as)";
        analysis.characteristics.push({ label: "√ìrbita", value: `${period.toFixed(1)} d√≠as`, icon: "üîÑ" });
        analysis.insights.push("üîÑ √ìrbita corta - Planeta interno tipo Mercurio");
      } else if (period < 365) {
        analysis.orbitType = "√ìrbita Media (10-365 d√≠as)";
        analysis.characteristics.push({ label: "√ìrbita", value: `${period.toFixed(0)} d√≠as`, icon: "üåê" });
        analysis.insights.push("üåê √ìrbita moderada - Zona habitable posible");
      } else {
        analysis.orbitType = "√ìrbita Larga (> 1 a√±o)";
        analysis.characteristics.push({ label: "√ìrbita", value: `${(period/365).toFixed(1)} a√±os`, icon: "üåç" });
        analysis.insights.push("üåç √ìrbita amplia - Planeta externo tipo Marte o m√°s");
      }
    }

    // An√°lisis de Insolaci√≥n (koi_insol)
    if (inputs.koi_insol) {
      const insol = inputs.koi_insol;
      if (insol > 2) {
        analysis.warnings.push("‚òÄÔ∏è Alta radiaci√≥n estelar - Superficie probablemente √°rida");
      } else if (insol >= 0.25 && insol <= 2) {
        analysis.insights.push("‚òÄÔ∏è Nivel de radiaci√≥n √≥ptimo para vida como la conocemos");
      } else {
        analysis.warnings.push("üåë Baja radiaci√≥n estelar - Mundo oscuro y fr√≠o");
      }
      analysis.characteristics.push({ 
        label: "Insolaci√≥n", 
        value: `${insol.toFixed(2)}x Tierra`, 
        icon: "‚òÄÔ∏è" 
      });
    }

    // An√°lisis de la Estrella (koi_steff)
    if (inputs.koi_steff) {
      const temp = inputs.koi_steff;
      if (temp > 7500) {
        analysis.stellarType = "‚≠ê Estrella Tipo A (Caliente - Azul/Blanca)";
      } else if (temp > 6000) {
        analysis.stellarType = "‚≠ê Estrella Tipo F-G (Sol-like)";
        analysis.insights.push("‚≠ê Estrella similar al Sol - Excelente para vida");
      } else if (temp > 5200) {
        analysis.stellarType = "‚≠ê Estrella Tipo G (Como nuestro Sol)";
        analysis.insights.push("‚òÄÔ∏è Estrella id√©ntica a nuestro Sol");
      } else if (temp > 3700) {
        analysis.stellarType = "‚≠ê Estrella Tipo K (Enana Naranja)";
        analysis.insights.push("üü† Estrella m√°s fr√≠a que el Sol - Vida longeva");
      } else {
        analysis.stellarType = "‚≠ê Estrella Tipo M (Enana Roja)";
        analysis.warnings.push("üî¥ Enana roja - Actividad estelar puede ser problem√°tica");
      }
    }

    // An√°lisis de Calidad de Detecci√≥n (koi_model_snr)
    if (inputs.koi_model_snr) {
      const snr = inputs.koi_model_snr;
      if (snr > 20) {
        analysis.detectionQuality = "‚úÖ Detecci√≥n Excelente (SNR > 20)";
        analysis.characteristics.push({ label: "Confianza", value: "Alta", icon: "‚úÖ" });
      } else if (snr > 10) {
        analysis.detectionQuality = "‚úì Detecci√≥n Buena (SNR 10-20)";
        analysis.characteristics.push({ label: "Confianza", value: "Media-Alta", icon: "‚úì" });
      } else if (snr > 7) {
        analysis.detectionQuality = "‚ö†Ô∏è Detecci√≥n Marginal (SNR 7-10)";
        analysis.characteristics.push({ label: "Confianza", value: "Media", icon: "‚ö†Ô∏è" });
        analysis.warnings.push("‚ö†Ô∏è Se√±al d√©bil - Requiere confirmaci√≥n adicional");
      } else {
        analysis.detectionQuality = "‚ùå Detecci√≥n D√©bil (SNR < 7)";
        analysis.characteristics.push({ label: "Confianza", value: "Baja", icon: "‚ùå" });
        analysis.warnings.push("‚ùå Se√±al muy d√©bil - Alto riesgo de falso positivo");
      }
    }

    // An√°lisis del par√°metro de impacto (koi_impact)
    if (inputs.koi_impact !== undefined && inputs.koi_impact !== "") {
      const impact = inputs.koi_impact;
      if (impact < 0.3) {
        analysis.insights.push("üéØ Tr√°nsito central - Observaci√≥n √≥ptima");
      } else if (impact < 0.7) {
        analysis.insights.push("üìê Tr√°nsito moderado - Buena geometr√≠a");
      } else {
        analysis.warnings.push("üìê Tr√°nsito rasante - Geometr√≠a dif√≠cil");
      }
    }

    return analysis;
  };

  const analysis = analyzeInputs();
  const hasData = Object.values(inputs).some(val => val !== "" && val !== null && val !== undefined);

  return (
    <div className="glass-panel analysis-panel">
      <h2 className="panel-title">
        <span className="title-icon">üî¨</span>
        An√°lisis Inteligente
      </h2>

      {!hasData ? (
        <div className="no-data-message">
          <div className="no-data-icon">üìä</div>
          <p>Ingresa los par√°metros del planeta para ver el an√°lisis detallado</p>
        </div>
      ) : (
        <div className="analysis-content">
          {/* Mini Planeta 3D */}
          <div className="mini-planet-container">
            <MiniPlanet3D inputs={inputs} />
            <div className="planet-label">
              {analysis.planetType || "Exoplaneta"}
            </div>
          </div>

          {/* Caracter√≠sticas Principales */}
          {analysis.characteristics.length > 0 && (
            <div className="characteristics-grid">
              {analysis.characteristics.map((char, idx) => (
                <div key={idx} className="characteristic-card">
                  <span className="char-icon">{char.icon}</span>
                  <div className="char-content">
                    <div className="char-label">{char.label}</div>
                    <div className="char-value">{char.value}</div>
                  </div>
                </div>
              ))}
            </div>
          )}

          {/* Habitabilidad */}
          {analysis.habitability && (
            <div className="analysis-section habitability">
              <h3 className="section-title">üåç Evaluaci√≥n de Habitabilidad</h3>
              <div className="habitability-status">{analysis.habitability}</div>
            </div>
          )}

          {/* Insights */}
          {analysis.insights.length > 0 && (
            <div className="analysis-section insights">
              <h3 className="section-title">üí° Hallazgos Clave</h3>
              <ul className="insights-list">
                {analysis.insights.map((insight, idx) => (
                  <li key={idx} className="insight-item">{insight}</li>
                ))}
              </ul>
            </div>
          )}

          {/* Advertencias */}
          {analysis.warnings.length > 0 && (
            <div className="analysis-section warnings">
              <h3 className="section-title">‚ö†Ô∏è Consideraciones</h3>
              <ul className="warnings-list">
                {analysis.warnings.map((warning, idx) => (
                  <li key={idx} className="warning-item">{warning}</li>
                ))}
              </ul>
            </div>
          )}

          {/* Informaci√≥n Estelar */}
          {analysis.stellarType && (
            <div className="analysis-section stellar">
              <h3 className="section-title">Estrella Anfitriona</h3>
              <div className="stellar-info">{analysis.stellarType}</div>
            </div>
          )}

          {/* Calidad de Detecci√≥n */}
          {analysis.detectionQuality && (
            <div className="analysis-section detection">
              <h3 className="section-title">üì° Calidad de Se√±al</h3>
              <div className="detection-quality">{analysis.detectionQuality}</div>
            </div>
          )}
        </div>
      )}
    </div>
  );
}